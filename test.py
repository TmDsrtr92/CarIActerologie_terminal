from agents import Agent, Runner
from pydantic import BaseModel, Field
import asyncio
from dotenv import load_dotenv
from typing import Literal
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.align import Align

load_dotenv()
console = Console()

class UserProfile(BaseModel):
    caractere: Literal["Nerveux", "Sentimental", "Col√©rique", "Passionn√©", "Sanguin", "Flegmatique", "Amorphique", "Apathique"] = Field(description="Type caract√©rologique de l'utilisateur")
    emotivite: Literal["Oui", "Non"] = Field(description="Si l'utilisateur est √©motif ou non")
    activite: Literal["Oui", "Non"] = Field(description="Si l'utilisateur est actif ou non")
    retentissement: Literal["Primaire", "Secondaire"] = Field(description="Si l'utilisateur a un retentissement primaire ou secondaire")

def display_header():
    """Display fancy header"""
    header = Text("üß† ANALYSE CARACT√âROLOGIQUE", style="bold magenta", justify="center")
    console.print(Panel(header, border_style="magenta", padding=(1, 2)))
    console.print()

def display_conversation_sample(sample_convo):
    """Display conversation sample in a nice format"""
    console.print("üìù [bold cyan]√âchantillon de conversation analys√©:[/bold cyan]")
    
    for i, msg in enumerate(sample_convo, 1):
        if msg["role"] == "user":
            console.print(f"[bold green]üë§ Utilisateur:[/bold green] {msg['content']}")
        else:
            console.print(f"[dim]ü§ñ Assistant:[/dim] [dim]{msg['content']}[/dim]")
    console.print()

def create_profile_table(profile):
    """Create a fancy table for the profile results"""
    table = Table(title="üéØ Profil Caract√©rologique D√©tect√©", border_style="blue")
    
    table.add_column("Dimension", style="cyan", no_wrap=True)
    table.add_column("R√©sultat", style="magenta")
    table.add_column("Description", style="dim")
    
    # Character type with emoji
    char_emoji = {
        "Nerveux": "‚ö°", "Sentimental": "üíù", "Col√©rique": "üî•", "Passionn√©": "‚ù§Ô∏è‚Äçüî•",
        "Sanguin": "‚òÄÔ∏è", "Flegmatique": "üßò", "Amorphique": "üå´Ô∏è", "Apathique": "üò¥"
    }
    
    table.add_row(
        "Caract√®re",
        f"{char_emoji.get(profile.caractere, 'üîç')} {profile.caractere}",
        "Type caract√©rologique principal"
    )
    
    # Emotivity
    emotivity_style = "green" if profile.emotivite == "Oui" else "yellow"
    emotivity_emoji = "üí≠" if profile.emotivite == "Oui" else "üßä"
    table.add_row(
        "√âmotivit√©",
        f"[{emotivity_style}]{emotivity_emoji} {profile.emotivite}[/{emotivity_style}]",
        "R√©activit√© √©motionnelle"
    )
    
    # Activity
    activity_style = "green" if profile.activite == "Oui" else "yellow"
    activity_emoji = "üèÉ" if profile.activite == "Oui" else "ü™ë"
    table.add_row(
        "Activit√©",
        f"[{activity_style}]{activity_emoji} {profile.activite}[/{activity_style}]",
        "Tendance √† l'action"
    )
    
    # Retentissement
    ret_style = "blue" if profile.retentissement == "Primaire" else "purple"
    ret_emoji = "‚ö°" if profile.retentissement == "Primaire" else "üîÑ"
    table.add_row(
        "Retentissement",
        f"[{ret_style}]{ret_emoji} {profile.retentissement}[/{ret_style}]",
        "Dur√©e des impressions"
    )
    
    return table

async def main():
    # Display header
    display_header()
    
    # Sample conversation history
    sample_convo = [
        {"content": "Bonjour, je m'appelle Marie", "role": "user"},
        {"content": "Bonjour Marie ! Comment allez-vous aujourd'hui ?", "role": "assistant"},
        {"content": "Je vais bien merci. Je suis quelqu'un qui r√©agit tr√®s vite aux √©v√©nements, parfois trop vite d'ailleurs", "role": "user"},
        {"content": "Je comprends. Pouvez-vous me parler un peu plus de vous ?", "role": "assistant"},
        {"content": "J'aime bouger, faire du sport, voyager. Je n'aime pas rester inactive. Quand quelque chose me pla√Æt, j'y pense longtemps apr√®s", "role": "user"},
        {"content": "C'est int√©ressant. Comment r√©agissez-vous face aux impr√©vus ?", "role": "assistant"},
        {"content": "Je me mets souvent en col√®re rapidement, mais √ßa passe vite aussi. Je prends les d√©cisions rapidement", "role": "user"}
    ]
    
    # Display conversation sample
    display_conversation_sample(sample_convo)
    
    # Create agent
    profiler_agent = Agent(
        name="Profiler",
        instructions="""
        Analysez l'historique de conversation fourni pour d√©terminer le profil caract√©rologique de l'utilisateur selon la caract√©rologie de Heymans-Le Senne.

        D√©terminez :
        1. √âMOTIVIT√â : "Oui" si la personne r√©agit facilement aux √©v√©nements, se laisse √©mouvoir, "Non" si elle reste calme et ma√Ætresse d'elle-m√™me
        2. ACTIVIT√â : "Oui" si la personne aime l'action, le mouvement, entreprendre, "Non" si elle pr√©f√®re la r√©flexion √† l'action
        3. RETENTISSEMENT : "Primaire" si les impressions s'effacent rapidement, "Secondaire" si elles persistent et influencent durablement

        Les 8 caract√®res possibles :
        - Nerveux (√â+, A-, P) : √©motif, non-actif, primaire
        - Sentimental (√â+, A-, S) : √©motif, non-actif, secondaire  
        - Col√©rique (√â+, A+, P) : √©motif, actif, primaire
        - Passionn√© (√â+, A+, S) : √©motif, actif, secondaire
        - Sanguin (√â-, A+, P) : non-√©motif, actif, primaire
        - Flegmatique (√â-, A+, S) : non-√©motif, actif, secondaire
        - Amorphique (√â-, A-, P) : non-√©motif, non-actif, primaire
        - Apathique (√â-, A-, S) : non-√©motif, non-actif, secondaire

        Basez-vous uniquement sur les √©l√©ments pr√©sents dans la conversation.
        """,
        output_type=UserProfile,
    )
    
    # Show processing with spinner
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        transient=True,
    ) as progress:
        task = progress.add_task("üî¨ Analyse du profil en cours...", total=None)
        result = await Runner.run(profiler_agent, sample_convo)
    
    profile = result.final_output
    
    # Display results in fancy table
    console.print(create_profile_table(profile))
    
    # Success message
    console.print()
    console.print(Panel(
        "‚úÖ [bold green]Analyse termin√©e avec succ√®s![/bold green]",
        border_style="green",
        padding=(1, 2)
    ))

if __name__ == "__main__":
    asyncio.run(main())



